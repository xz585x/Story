git remote add origin git@github.com:xz585x/Story.git
git push -u origin master
library(RMySQL)
install(RMySQL)
install packages(RMySQL)
installpackages(RMySQL)
library(RMySQL)
install.packages(RMySQL)
library(RMySQL)
drv <- dbDriver("MySQL")
co <- dbConnect(drv, user="2009Expo", password="R R0cks", port=3306, dbname="accidents", host="headnode.stat.iastate.edu")
dbListTables(co)
dbDisconnect(co)
drv <- dbDriver("MySQL")
co <- dbConnect(drv, user="2009Expo", password="R R0cks", port=3306, dbname="accidents", host="headnode.stat.iastate.edu")
dbListTables(co)
dbListFields(co, "accidents")
dbDisconnect(co)
drv <- dbDriver("MySQL")
co <- dbConnect(drv, user="2009Expo", password="R R0cks", port=3306, dbname="accidents", host="headnode.stat.iastate.edu")
# send an SQL Query
dbGetQuery(co, "select count(*) from accidents")
dbGetQuery(co, "select Year, count(*) from accidents group by Year")
dbDisconnect(co)
dbGetQuery(co, "select count(*) from accidents")
dbDisconnect(co)
co <- dbConnect(dbDriver("MySQL"), user="2009Expo", password="R R0cks", port=3306, dbname="accidents", host="headnode.stat.iastate.edu")
res <- dbSendQuery(co, "SELECT * FROM accidents")
fetch (res, 10)
res
fetch (res, 10)
fetch (res, 10)
fetch (res, 10)
dbDisconnect(co)
co <- dbConnect(drv, user="2009Expo", password="R R0cks", port=3306, dbname="accidents", host="headnode.stat.iastate.edu")
dbGetQuery(co, "select count(*) from accidents")
dbGetQuery(co, "select Year, count(*) from accidents group by Year")
res <- dbSendQuery(co, "SELECT * FROM accidents")
fetch (res, 10)
dbGetQuery(co, "select count(*) from accidents")
?dbSendQuery
co <- dbConnect(drv, user="2009Expo", password="R R0cks", port=3306, dbname="accidents", host="headnode.stat.iastate.edu")
co
dbListTables(co)
dbListTables(co)[[1]]
co
dbGetQuery(co, "select Year, count(*) from accidents group by Year")
dbGetQuery(co, "select Year, count(DRUNK-DR) from accidents group by Year")
dbGetQuery(co, "select Year, count(DRUNK_DR) from accidents group by Year")
dbGetQuery(co, "select Year, count(Year) from accidents
dbGetQuery(co, "select Year, count(Year) from accidents group by Year")
dbGetQuery(co, "select Year, count(accidents) from accidents group by Year")
dbGetQuery(co, "select Year,DRUNK_DR, count(accidents) from accidents group by Year")
dbGetQuery(co, "select Year,DRUNK_DR, count(DRUNK_DR) from accidents group by Year")
dbGetQuery(co, "select Year,DRUNK_DR, count(EVENTNUM) from accidents group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR>0, count(*) from accidents group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents, WHERE DRUNK_DR!=0,group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents, WHERE DRUNK_DR!=0;group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents, WHERE DRUNK_DR!=0 group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents, WHERE DRUNK_DR>0 group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents, WHERE DRUNK_DR>0; group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents WHERE DRUNK_DR is >0 group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents WHERE DRUNK_DR is not 0 group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents WHERE DRUNK_DR is not 0; group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents WHERE DRUNK_DR != "0""; group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents WHERE DRUNK_DR != "0"; group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents WHERE DRUNK_DR != 0; group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0; group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,DRUNK_DR")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year")
dbGetQuery(co, "select Year,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,Day")
dbGetQuery(co, "select Year,Day,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,Day")
dbGetQuery(co, "select Year,Day,Week,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,Day")
dbGetQuery(co, "select Year,Day,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,Day")
dbGetQuery(co, "select Year,Date,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,Date")
dbGetQuery(co, "select Year,DAY_WEEK,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,DAY_WEEK")
dbGetQuery(co, "select Year,DAY_WEEK,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,DAY_WEEK,DRUNK_DR")
dbGetQuery(co, "select Year,DAY_WEEK,DRUNK_DR, count(*) from accidents where DRUNK_DR != 0 group by Year,DAY_WEEK")
dbGetQuery(co, "select Year,DAY_WEEK, count(*) from accidents where DRUNK_DR != 0 group by Year,DAY_WEEK")
dbGetQuery(co, "select Year,DAY_WEEK, count(*) from accidents group by Year,DAY_WEEK")
A<-dbGetQuery(co, "select Year,DAY_WEEK, count(*) from accidents where DRUNK_DR != 0 group by Year,DAY_WEEK")
a<-dbGetQuery(co, "select Year,DAY_WEEK, count(*) from accidents where DRUNK_DR != 0 group by Year,DAY_WEEK")
summary(a)
a[,3]
b<-dbGetQuery(co, "select Year,DAY_WEEK, count(*) from accidents group by Year,DAY_WEEK")
a[,3]/b[,3]
a[,3]
b[,3]
a
b
for (i in 1:length(b[,3])){
for(j in 1:length(a[,3])){
if((a[,1]=b[,1])&(a[,2]=b[,2])){
b[,4]=a[,3]
}
}
}
dim(a)
dim(b)
a
newa<-a
newa<-a[-c(62:68),]
newa
newa[62,]<-c(2008,9,0)
newa
newa<-rbind(newa,a[c(62:68),])
newa
dim(newa)
b[,4]<-newa[,3]/b[,3]
b
names(b[,4])<-"Percentage"
b
names(b)[,4]<-"Percentage"
names(b)[4]<-"Percentage"
b
library(ggplot2)
gplot(b[,4],b[,2],facet=Year~.,data=b)
gplot2(b[,4],b[,2],facet=Year~.,data=b)
qplot(b[,4],b[,2],facet=Year~.,data=b)
qplot(b[,2],b[,4],facet=Year~.,data=b)
qplot(DAY_WEEK,Percentage,facet=Year~.,data=b)
library(plyr)
library(plyr)
ddply(b,C(DAY_WEEK,Percentage),summarise,
average=average(Percentage),
sd=var(Percentage),
n=nrow(Percentage))
str(b)
ddply(b,C(DAY_WEEK,Percentage),summarise,
average=average(Percentage),
sd=var(Percentage),
n=nrow(Percentage))
qplot(DAY_WEEK,Percentage,facets=Year~.,data=b)
ddply(b,c(DAY_WEEK,Percentage),summarise,
average=average(Percentage),
sd=var(Percentage),
n=nrow(Percentage))
ddply(b,"Percentage",summarise,
average=average(Percentage),
sd=var(Percentage),
n=nrow(Percentage))
ddply(b,.(DAY_WEEK,Percentage),summarise,
average=mean(Percentage),
sd=sd(Percentage),
n=nrow(Percentage))
ddply(b,.(DAY_WEEK),summarise,
average=mean(Percentage),
sd=sd(Percentage),
n=nrow(Percentage))
ddply(b,DAY_WEEK~Percentage,summarise,
average=mean(Percentage),
sd=sd(Percentage),
n=nrow(Percentage))
ddply(b,.(DAY_WEEK,Percentage),summarise,
average=mean(Percentage),
sd=sd(Percentage),
n=nrow(Percentage))
ddply(b,.(DAY_WEEK),summarise,
mean=mean(Percentage),
sd=sd(Percentage),
n=nrow(Percentage))
ddply(b,.(DAY_WEEK),summarise,
mean=mean(Percentage),
sd=sd(Percentage),
n=nrow(Percentage))
b
str(b)
b[2]<-as.numeric(b[2])
b[,2]<-as.numeric(b[,2])
str(b)
ddply(b,.(DAY_WEEK),summarise,
mean=mean(Percentage),
sd=sd(Percentage),
n=nrow(Percentage))
ddply(b,.(DAY_WEEK),summarise,mean=mean(Percentage),sd=sd(Percentage),n=nrow(Percentage))
ddply(b,.(DAY_WEEK),summarise,mean=mean(Percentage),sd=sd(Percentage))
ddply(b,.(DAY_WEEK),summarise,mean=mean(Percentage),sd=sd(Percentage),n=count(Percentage))
ddply(b,.(DAY_WEEK),summarise,mean=mean(Percentage),sd=sd(Percentage),n=nrow(Percentage))
ddply(b,.(DAY_WEEK),summarise,mean=mean(Percentage),sd=sd(Percentage),n=length(Percentage))
newtable<-ddply(b,.(DAY_WEEK),summarise,mean=mean(Percentage),sd=sd(Percentage),n=length(Percentage))
qplot(DAY_WEEK,mean,data=newtable)
errbar( DAY_WEEK, mean, mean + sd, mean - sd )
library(Hmisc)
errbar( DAY_WEEK, mean, mean + sd, mean - sd )
plot(DAY_WEEK,mean,data=newtable)
